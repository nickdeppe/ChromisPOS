//    Chromis POS  - The New Face of Open Source POS
//    Copyright (c) (c) 2015-2016
//    http://www.chromis.co.uk
//
//    This file is part of Chromis POS
//
//     Chromis POS is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Chromis POS is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Chromis POS.  If not, see <http://www.gnu.org/licenses/>.
package uk.chromis.pos.config;

import java.awt.Component;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JSpinner;
import uk.chromis.basic.BasicException;
import uk.chromis.data.user.DirtyManager;
import uk.chromis.format.Formats;
import uk.chromis.pos.forms.AppConfig;

/**
 *
 *
 */
public class JPanelConfigBoxOffice extends javax.swing.JPanel implements PanelConfig {

    private final DirtyManager dirty = new DirtyManager();
    private final AppConfig app;

    public JPanelConfigBoxOffice() {
        initComponents();
        app = AppConfig.getInstance();
        jchkAllowRegularProducts.addActionListener(dirty);
        jchkResetShowDate.addActionListener(dirty);
        
        String appFormatTime = app.getProperty("format.time");
        String timeFormat = ( appFormatTime == null || appFormatTime.equals("") ) ? "hh:mm a" : appFormatTime ;
        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(m_jSpinnerWorkdayStart , timeFormat );        
        m_jSpinnerWorkdayStart.setEditor(timeEditor);
        
    }

    /**
     *
     * @return
     */
    @Override
    public boolean hasChanged() {
        return dirty.isDirty();
    }

    /**
     *
     * @return
     */
    @Override
    public Component getConfigComponent() {
        return this;
    }

    /**
     *
     */
    @Override
    public void loadProperties() {
        jchkAllowRegularProducts.setSelected(app.getBoolean("boxoffice.allowregularproducts"));
        jchkResetShowDate.setSelected(app.getBoolean("boxoffice.resetshowdate"));
        Date date;
        try {
            date = (Date) Formats.TIME.parseValue(app.getProperty("boxoffice.workdaystart"));
        } catch (BasicException ex) {
            date = null;
        }
        if (date == null) {
            Calendar cal = Calendar.getInstance();
            cal.setTime(new Date());
            cal.set(Calendar.HOUR_OF_DAY, 0);
            cal.set(Calendar.MINUTE, 0);
            cal.set(Calendar.SECOND, 0);
            cal.set(Calendar.MILLISECOND, 0);
            date = cal.getTime();
        }
        m_jSpinnerWorkdayStart.setValue(date);
        dirty.setDirty(false);
    }

    /**
     *
     */
    @Override
    public void saveProperties() {
        
        String timeFormat = Formats.TIME.formatValue(m_jSpinnerWorkdayStart.getValue());
        app.setBoolean("boxoffice.allowregularproducts", jchkAllowRegularProducts.isSelected());
        app.setBoolean("boxoffice.resetshowdate", jchkResetShowDate.isSelected());
        app.setProperty("boxoffice.workdaystart", timeFormat);
        dirty.setDirty(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jchkAllowRegularProducts = new eu.hansolo.custom.SteelCheckBox();
        jchkResetShowDate = new eu.hansolo.custom.SteelCheckBox();
        jLabel1 = new javax.swing.JLabel();
        m_jSpinnerWorkdayStart = new javax.swing.JSpinner();

        setMinimumSize(new java.awt.Dimension(700, 500));
        setPreferredSize(new java.awt.Dimension(700, 650));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pos_messages"); // NOI18N
        jchkAllowRegularProducts.setText(bundle.getString("label.boxofficeallowstandardproducts")); // NOI18N

        jchkResetShowDate.setText(bundle.getString("label.boxofficeresetdate")); // NOI18N
        jchkResetShowDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchkResetShowDateActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("Beginning of work day:");

        m_jSpinnerWorkdayStart.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        m_jSpinnerWorkdayStart.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MINUTE));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jchkAllowRegularProducts, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jchkResetShowDate, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_jSpinnerWorkdayStart, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(291, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jchkAllowRegularProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jchkResetShowDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(m_jSpinnerWorkdayStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(528, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jchkResetShowDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkResetShowDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jchkResetShowDateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private eu.hansolo.custom.SteelCheckBox jchkAllowRegularProducts;
    private eu.hansolo.custom.SteelCheckBox jchkResetShowDate;
    private javax.swing.JSpinner m_jSpinnerWorkdayStart;
    // End of variables declaration//GEN-END:variables

}
