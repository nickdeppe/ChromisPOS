/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.chromis.pos.inventory;

import java.util.ArrayList;
import javax.swing.table.AbstractTableModel;
import uk.chromis.pos.ticket.ShowScheduleDistributionInfo;

/**
 *
 * @author nick
 */
public class ShowScheduleDistributionEditor extends javax.swing.JPanel {

    private final DistributionTableModel m_tableModel;
    
    
    public ShowScheduleDistributionEditor() {
        
        initComponents();
        
        m_tableModel = new DistributionTableModel();
        
        jDistributionTable.setModel(m_tableModel);
        
        m_tableModel.addRow(new ShowScheduleDistributionInfo("asdf", "fgwef", "Test", 1.00));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jDistributionTable = new javax.swing.JTable();

        jScrollPane2.setBorder(null);

        jDistributionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jDistributionTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(jDistributionTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable jDistributionTable;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables




    private static class DistributionTableModel extends AbstractTableModel {
        
        private final String[] m_columns = new String[2];
        private final ArrayList<ShowScheduleDistributionInfo> m_rows = new ArrayList<>();
        
        public DistributionTableModel() {
            m_columns[0] = "Description";
            m_columns[1] = "Percentage";
        }
        
        @Override
        public int getColumnCount() {
            return m_columns.length;
        }
        @Override
        public int getRowCount() {
            return m_rows.size();
        }
        @Override
        public String getColumnName(int col) {
            return m_columns[col];
        }
        @Override
        public Object getValueAt(int row, int col) {
            switch (col) {
                case 0:
                    return m_rows.get(row).getName();
                case 1:
                    return m_rows.get(row).getRate();
                default:
                    return m_rows.get(row).toString();
            }
        }
        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
        @Override
        public boolean isCellEditable(int row, int col) {
            return true;
        }
        @Override
        public void setValueAt(Object value, int row, int col) {
            switch (col) {
                case 0:
                    m_rows.get(row).setName((String) value);
                    break;
                case 1:
                    m_rows.get(row).setRate((Double) value);
                    break;
                default:
                    break;
            }
            fireTableCellUpdated(row, col);
        }
        
        public void addRow(ShowScheduleDistributionInfo distInfo) {
            m_rows.add(distInfo);
        }
        
        
    }


}
